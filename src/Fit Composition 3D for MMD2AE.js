// Generated by CoffeeScript 1.10.0

/*
  Fit Composition 3D for MMD2AE
    (C) あかつきみさき(みくちぃP)

  このスクリプトについて
    このスクリプトはMMD2AEで出力した,nullで親子付けされたカメラレイヤー専用のものです.
    3Dレイヤーをアクティブカメラを使用して,コンポジションサイズにフィットするようにリサイズします.

  使用方法
    1.ファイル→スクリプト→スクリプトファイルの実行から実行.

  動作環境
    Adobe After Effects CS6以上

  ライセンス
    MIT License

  バージョン情報
    2016/11/07 Ver 1.2.0 Update
      対応バージョンの変更.

    2014/02/17 Ver 1.1.0 Update
      方向がずれていた問題の修正.

    2014/01/06 Ver 1.0.0 Release
 */

(function() {
  var ADBE_ORIENTATION, ADBE_POSITION, ADBE_SCALE, ADBE_TRANSFORM_GROUP, CAMERA_NAME, FC3D4MMD2AEData, actComp, entryFunc, getLocalizedText, hasActiveCamera, isCompActive, isLayerSelected, parentNullX, parentNullY, runAEVersionCheck, selLayers, undoEntryFunc;

  FC3D4MMD2AEData = (function() {
    var canRunVersionC, canRunVersionNum, scriptName, scriptURLName, scriptURLVersion, scriptVersionNumber;
    scriptName = "Fit Composition 3D for MMD2AE";
    scriptURLName = "FitComposition3DforMMD2AE";
    scriptVersionNumber = "1.2.0";
    scriptURLVersion = 120;
    canRunVersionNum = 11.0;
    canRunVersionC = "CS6";
    return {
      getScriptName: function() {
        return scriptName;
      },
      getScriptURLName: function() {
        return scriptURLName;
      },
      getScriptVersionNumber: function() {
        return scriptVersionNumber;
      },
      getCanRunVersionNum: function() {
        return canRunVersionNum;
      },
      getCanRunVersionC: function() {
        return canRunVersionC;
      },
      getGuid: function() {
        return guid;
      }
    };
  })();

  ADBE_TRANSFORM_GROUP = "ADBE Transform Group";

  ADBE_POSITION = "ADBE Position";

  ADBE_SCALE = "ADBE Scale";

  ADBE_ORIENTATION = "ADBE Orientation";

  CAMERA_NAME = "MMD CAMERA";

  parentNullX = CAMERA_NAME + " CONTROL X";

  parentNullY = CAMERA_NAME + " CONTROL Y";

  CompItem.prototype.hasTargetLayer = function(targetName) {
    return this.layer(targetName) != null;
  };


  /*
  起動しているAEの言語チェック
   */

  getLocalizedText = function(str) {
    if (app.language === Language.JAPANESE) {
      return str.jp;
    } else {
      return str.en;
    }
  };


  /*
  許容バージョンを渡し,実行できるか判別
   */

  runAEVersionCheck = function(AEVersion) {
    if (parseFloat(app.version) < AEVersion.getCanRunVersionNum()) {
      alert("This script requires After Effects " + (AEVersion.getCanRunVersionC()) + " or greater.");
      return false;
    } else {
      return true;
    }
  };


  /*
  コンポジションにアクティブカメラが存在するか確認する関数
   */

  hasActiveCamera = function(actComp) {
    return actComp.activeCamera != null;
  };


  /*
  コンポジションを選択しているか確認する関数
   */

  isCompActive = function(selComp) {
    if (!(selComp && selComp instanceof CompItem)) {
      alert("Select Composition");
      return false;
    } else {
      return true;
    }
  };


  /*
  レイヤーを選択しているか確認する関数
   */

  isLayerSelected = function(selLayers) {
    if (selLayers.length === 0) {
      alert("Select Layers");
      return false;
    } else {
      return true;
    }
  };

  entryFunc = function() {
    var curLayer, i, ref;
    if (!hasActiveCamera(actComp)) {
      actComp.layers.addCamera(FC3D4MMD2AEData.getScriptName(), [actComp.width / 2, actComp.height / 2]);
    }
    if (!actComp.hasTargetLayer(CAMERA_NAME)) {
      CAMERA_NAME = prompt("MMD camera not found\nPut MMD camera layer's name", CAMERA_NAME);
      parentNullX = CAMERA_NAME + " CONTROL X";
      parentNullY = CAMERA_NAME + " CONTROL Y";
    }
    if (CAMERA_NAME == null) {
      return 0;
    }
    if (!actComp.hasTargetLayer(CAMERA_NAME)) {
      return 0;
    }
    if (!actComp.hasTargetLayer(parentNullX)) {
      parentNullX = prompt("Control X not found\nPut Control X layer's name", parentNullX);
    }
    if (parentNullX == null) {
      return 0;
    }
    if (!actComp.hasTargetLayer(parentNullX)) {
      return 0;
    }
    if (!actComp.hasTargetLayer(parentNullY)) {
      parentNullY = prompt("Control Y not found\nPut Control Y layer's name", CAMERA_NAME);
    }
    if (parentNullY == null) {
      return 0;
    }
    if (!actComp.hasTargetLayer(parentNullY)) {
      return 0;
    }
    for (curLayer = i = 0, ref = selLayers.length; i < ref; curLayer = i += 1) {
      if (selLayers[curLayer] instanceof CameraLayer || selLayers[curLayer] instanceof LightLayer) {
        continue;
      }
      selLayers[curLayer].threeDLayer = true;
      selLayers[curLayer].property(ADBE_TRANSFORM_GROUP).property(ADBE_POSITION).expression = "thisComp.layer(\"" + CAMERA_NAME + " CONTROL Y\").transform.position;";
      selLayers[curLayer].property(ADBE_TRANSFORM_GROUP).property(ADBE_SCALE).expression = "var actCam = thisComp.activeCamera;\nvar camPointOfInterest = thisComp.layer(\"" + CAMERA_NAME + " CONTROL X\").transform.anchorPoint;\nvar camPosition = actCam.transform.position;\nvar camZoom = actCam.cameraOption.zoom;\n\nvar x = Math.abs(camPointOfInterest[0] - camPosition[0]);\nvar y = Math.abs(camPointOfInterest[1] - camPosition[1]);\nvar z = Math.abs(camPointOfInterest[2] - camPosition[2]);\n\nrange = Math.sqrt((x*x + y*y + z*z));\nthisScale = range / camZoom * 100;\n\n[thisScale, thisScale, thisScale]";
      selLayers[curLayer].property(ADBE_TRANSFORM_GROUP).property(ADBE_ORIENTATION).expression = "var x = transform.orientation[0];\nvar y = transform.orientation[1];\nvar z = transform.orientation[2] + thisComp.layer(\"" + CAMERA_NAME + " CONTROL X\").transform.zRotation;\n\n[x, y, z]";
      selLayers[curLayer].autoOrient = AutoOrientType.CAMERA_OR_POINT_OF_INTEREST;
    }
    return 0;
  };

  undoEntryFunc = function(data) {
    app.beginUndoGroup(data.getScriptName());
    entryFunc();
    app.endUndoGroup();
    return 0;
  };


  /*
  メイン処理開始
   */

  if (!runAEVersionCheck(FC3D4MMD2AEData)) {
    return 0;
  }

  actComp = app.project.activeItem;

  if (!isCompActive(actComp)) {
    return 0;
  }

  selLayers = actComp.selectedLayers;

  if (!isLayerSelected(selLayers)) {
    return 0;
  }

  undoEntryFunc(FC3D4MMD2AEData);

  return 0;

}).call(this);
